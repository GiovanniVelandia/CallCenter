package co.com.almundo.callCenter.empleado;

import java.util.ArrayList;
import java.util.List;

import co.com.almundo.callCenter.enumeracion.EnumTipoEmpleado;

public class EmpleadoCallCenter {

	private List<Empleado> empleados;

	public EmpleadoCallCenter() {
		empleados = new ArrayList<>();
	}

	/**
	 * 
	 */
	public void asignarEmpleados() {
		Empleado empleadoAdd = new Empleado();
		empleadoAdd.setId(1);
		TipoEmpleado tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(2);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(3);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(4);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(5);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(6);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.SUPERVISOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.SUPERVISOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(7);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.SUPERVISOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.SUPERVISOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setId(8);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.DIRECTOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.DIRECTOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
	}

	/**
	 * 
	 * @return
	 */
	public synchronized Empleado obtenerEmpleado() {
		Empleado empleado = null;

		// Verifica la disponibilidad de empleados con el tipo de Operador
		for (Empleado empleadoOperador : empleados) {
			if (empleadoOperador.getTipoEmpleado().getId().equals(EnumTipoEmpleado.OPERADOR.getCodigo())) {
				if (!empleadoOperador.isAsignado()) {
					empleado = empleadoOperador;
					empleado.setAsignado(true);
					break;
				}
			}
		}

		// Verifica la disponibilidad de empleados con el tipo de Supervisor
		if (empleado == null) {
			for (Empleado empleadoSupervisor : empleados) {
				if (empleadoSupervisor.getTipoEmpleado().getId().equals(EnumTipoEmpleado.SUPERVISOR.getCodigo())) {
					if (!empleadoSupervisor.isAsignado()) {
						empleado = empleadoSupervisor;
						empleado.setAsignado(true);
						break;
					}
				}
			}
		}

		// Verifica la disponibilidad de empleados con el tipo de director
		if (empleado == null) {
			for (Empleado empleadoDirector : empleados) {
				if (empleadoDirector.getTipoEmpleado().getId().equals(EnumTipoEmpleado.DIRECTOR.getCodigo())) {
					if (!empleadoDirector.isAsignado()) {
						empleado = empleadoDirector;
						empleado.setAsignado(true);
						break;
					}
				}
			}
		}
		return empleado;
	}

	/**
	 * 
	 * @param empleado
	 */
	public void cambiarEstadoLibre(Empleado empleado) {
		for (Empleado empleadoL : empleados) {
			if (empleadoL.equals(empleado)) {
				empleadoL.setAsignado(false);
				break;
			}
		}
	}

	/**
	 * 
	 * @param empleado
	 */
	public void asignarEmpleado(Empleado empleado) {
		this.empleados.add(empleado);
	}

	public List<Empleado> getEmpleados() {
		return empleados;
	}

	public void setEmpleados(List<Empleado> empleados) {
		this.empleados = empleados;
	}
}
