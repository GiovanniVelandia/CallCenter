package co.com.almundo.callCenter.negocio;

import java.util.ArrayList;
import java.util.List;

import co.com.almundo.callCenter.empleado.Empleado;
import co.com.almundo.callCenter.empleado.TipoEmpleado;
import co.com.almundo.callCenter.enumeracion.EnumTipoEmpleado;
import co.com.almundo.callCenter.llamada.Llamada;

/**
 * Clase que se encarga de manejar todo el negocio del callcenter
 * 
 * @author GIOVANNI-PC
 *
 */
public class CallCenter {

	private List<Empleado> empleados;
	private List<Llamada> llamadas;

	public CallCenter() {
		empleados = new ArrayList<>();
		llamadas = new ArrayList<>();
	}

	/**
	 * Me todo para incluir los empleados al sistema para la atencion de
	 * llamadas
	 * 
	 * @author GIOVANNI-PC
	 */
	public void asignarEmpleados() {
		Empleado empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(1);
		TipoEmpleado tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(2);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(3);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(4);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(5);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.OPERADOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.OPERADOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(6);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.SUPERVISOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.SUPERVISOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(7);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.SUPERVISOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.SUPERVISOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
		empleadoAdd = new Empleado();
		empleadoAdd.setCodigo(8);
		tipoEmpleado = new TipoEmpleado();
		tipoEmpleado.setCargo(EnumTipoEmpleado.DIRECTOR.toString());
		tipoEmpleado.setId(EnumTipoEmpleado.DIRECTOR.getCodigo());
		empleadoAdd.setTipoEmpleado(tipoEmpleado);
		asignarEmpleado(empleadoAdd);
	}

	/**
	 * Clase que se encarga de obtener un empleado disponible para atender una
	 * llamada, verificando el tipo de empleado y su prioridad
	 * 
	 * @author GIOVANNI-PC
	 * @return Empleado
	 */
	public synchronized Empleado obtenerEmpleado() {
		Empleado empleado = null;

		// Verifica la disponibilidad de empleados con el tipo de Operador
		for (Empleado empleadoOperador : empleados) {
			if (empleadoOperador.getTipoEmpleado().getId().equals(EnumTipoEmpleado.OPERADOR.getCodigo())) {
				if (!empleadoOperador.isAsignado()) {
					empleado = empleadoOperador;
					empleado.setAsignado(true);
					break;
				}
			}
		}

		// Verifica la disponibilidad de empleados con el tipo de Supervisor
		if (empleado == null) {
			for (Empleado empleadoSupervisor : empleados) {
				if (empleadoSupervisor.getTipoEmpleado().getId().equals(EnumTipoEmpleado.SUPERVISOR.getCodigo())) {
					if (!empleadoSupervisor.isAsignado()) {
						empleado = empleadoSupervisor;
						empleado.setAsignado(true);
						break;
					}
				}
			}
		}

		// Verifica la disponibilidad de empleados con el tipo de director
		if (empleado == null) {
			for (Empleado empleadoDirector : empleados) {
				if (empleadoDirector.getTipoEmpleado().getId().equals(EnumTipoEmpleado.DIRECTOR.getCodigo())) {
					if (!empleadoDirector.isAsignado()) {
						empleado = empleadoDirector;
						empleado.setAsignado(true);
						break;
					}
				}
			}
		}
		return empleado;
	}

	/**
	 * 
	 * @param empleado
	 */
	public synchronized void cambiarEstadoLibre(Empleado empleado) {
		for (Empleado empleadoL : empleados) {
			if (empleadoL.equals(empleado)) {
				empleadoL.setAsignado(false);
				break;
			}
		}
	}

	/**
	 * 
	 * @param empleado
	 */
	public void asignarEmpleado(Empleado empleado) {
		this.empleados.add(empleado);
	}

	public List<Empleado> getEmpleados() {
		return empleados;
	}

	public void setEmpleados(List<Empleado> empleados) {
		this.empleados = empleados;
	}

	public List<Llamada> getLlamadas() {
		return llamadas;
	}

	public void setLlamadas(List<Llamada> llamadas) {
		this.llamadas = llamadas;
	}
}
